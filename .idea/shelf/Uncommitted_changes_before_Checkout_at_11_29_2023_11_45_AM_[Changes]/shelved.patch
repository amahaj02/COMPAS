Index: src/main/ui/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\r\n\r\n//import ui.Interface;\r\n\r\nimport model.Player;\r\nimport org.json.JSONArray;\r\nimport org.json.JSONObject;\r\nimport persistence.GameReader;\r\nimport persistence.GameWriter;\r\n\r\nimport java.io.IOException;\r\nimport java.util.*;\r\n\r\n/**\r\n * The `Game` class represents the core logic and management of the game.\r\n * It handles player management, gameplay, and game-related data, such as the list of players,\r\n * the active player, the current letter, and game constants.\r\n */\r\n\r\npublic class Game {\r\n    // will have a list of players\r\n    // will assign a letter from \"GLOBE\" to each player on miss\r\n\r\n    private List<Player> lop;\r\n    private int activePlayerIndex;\r\n    private Player activePlayer;\r\n    private char currentLetter;\r\n    private String answer;\r\n    char loadLetter;\r\n    String loadPlayer;\r\n    private int command;\r\n    private Scanner input;\r\n    Random random = new Random();\r\n\r\n    private static final String JSON_PATH = \"./data/data.json\";\r\n\r\n    public static final String START_WORD = \"atlas\";\r\n    public static final List<String> DATABASE = new ArrayList<>();\r\n    private static List<String> ANSWERS = new ArrayList<>();\r\n\r\n    public static final String RESET = \"\\u001B[0m\";\r\n    public static final String BLUE = \"\\u001B[34m\";\r\n\r\n    // Creates a new game instance with an empty list of players and initializes the game.\r\n    public Game() {\r\n        lop = new ArrayList<>();\r\n//        init();\r\n    }\r\n\r\n    /**\r\n     * Requires: None.\r\n     * Modifies: None.\r\n     * Effects: Initializes the database of place names.\r\n     */\r\n    public void createData() {\r\n        String[] countries = {\r\n                \"singapore\", \"sri lanka\", \"spain\", \"switzerland\", \"south africa\",\r\n                \"south sudan\", \"sweden\", \"estonia\", \"england\", \"egypt\", \"afghanistan\",\r\n                \"azerbaijan\", \"america\", \"australia\", \"austria\", \"albania\", \"armenia\",\r\n                \"algeria\", \"new zealand\", \"netherlands\", \"nepal\", \"namibia\", \"denmark\",\r\n                \"dominican republic\", \"djibouti\", \"dominica\", \"latvia\", \"lebanon\",\r\n                \"luxembourg\", \"libya\", \"laos\", \"kuwait\", \"kenya\", \"kazakhstan\", \"kyrgyzstan\",\r\n                \"costa rica\", \"chile\", \"cameroon\", \"chad\", \"india\", \"italy\", \"iran\", \"iraq\",\r\n                \"ghana\", \"germany\", \"georgia\", \"guinea\", \"greece\", \"qatar\", \"turkey\",\r\n                \"yemen\", \"lebanon\"\r\n        };\r\n\r\n        DATABASE.addAll(Arrays.asList(countries));\r\n    }\r\n\r\n    /**\r\n     * Requires: None.\r\n     * Modifies: None.\r\n     * Effects: Initializes the game input scanner and creates place name data.\r\n     */\r\n    public void init() {\r\n        input = new Scanner(System.in);\r\n        input.useDelimiter(\"\\n\");\r\n\r\n        showMainMenu();\r\n    }\r\n\r\n    /**\r\n     * Requires: None.\r\n     * Modifies: None.\r\n     * Effects: Displays the main menu options and handles user input.\r\n     */\r\n    public void showMainMenu() {\r\n        System.out.println(\"1 --> Start Game\");\r\n        System.out.println(\"2 --> Quit Game\");\r\n        System.out.println(\"3 --> Load Game\");\r\n        command = input.nextInt();\r\n\r\n        handleMainMenu();\r\n    }\r\n\r\n    /**\r\n     * Adds a player to the List of Players (lop).\r\n     * @param p The player to be added.\r\n     * @requires The input player (p) is not null.\r\n     * @modifies The List of Players (lop).\r\n     * @effects Adds the specified player to the List of Players.\r\n     */\r\n    public void addToLop(Player p) {\r\n        lop.add(p);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the List of Players (lop).\r\n     * @requires None.\r\n     * @modifies None.\r\n     * @effects Returns the List of Players containing player objects.\r\n     * @return The List of Players.\r\n     */\r\n    public List<Player> getLop() {\r\n        return lop;\r\n    }\r\n\r\n    /**\r\n     * Modifies the name of a player in the List of Players (lop).\r\n     * @param name The current name of the player to be modified.\r\n     * @param newName The new name to set for the player.\r\n     * @requires Both name and newName are not null.\r\n     * @modifies The name of the specified player in the List of Players (lop).\r\n     * @effects Updates the name of the specified player to the new name.\r\n     */\r\n    public void modifyPlayerFromLop(String name, String newName) {\r\n        for (Player p: lop) {\r\n            if (p.getName().toLowerCase().equals(name.toLowerCase())) {\r\n                p.setName(newName);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Requires: None.\r\n     * Modifies: None.\r\n     * Effects: Resets game-related variables.\r\n     */\r\n    public void resetVars() {\r\n        lop = new ArrayList<>();\r\n        ANSWERS = new ArrayList<>();\r\n    }\r\n\r\n    /**\r\n     * Requires: None.\r\n     * Modifies: None.\r\n     * Effects: Handles user choices from the main menu.\r\n     */\r\n    public void handleMainMenu() {\r\n        if (command == 1) {\r\n            showStartMenu();\r\n            showMainMenu();\r\n        } else if (command == 2) {\r\n            System.out.println(\"Thank you for playing!\");\r\n            System.exit(0);\r\n        } else if (command == 3) {\r\n            handleLoad();\r\n            startGame(true);\r\n        } else {\r\n            System.out.println(\"Invalid Entry!\");\r\n            showMainMenu();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * REQUIRES: None.\r\n    * MODIFIES: loadLetter, loadPlayer, DATABASE, ANSWERS, lop.\r\n    * EFFECTS: Reads game data from a JSON file and loads it into the game. If the JSON data is not empty, it updates\r\n      the game state with the loaded data, including the current letter, active player, remaining countries, answered\r\n      countries, and list of players. If the JSON data is empty, it displays a message and returns to the main menu.\r\n     */\r\n    public void handleLoad() {\r\n        GameReader reader = new GameReader(JSON_PATH);\r\n        try {\r\n            JSONObject data = reader.read();\r\n            if (!data.isEmpty()) {\r\n                loadLetter = data.getString(\"currentLetter\").charAt(0);\r\n                loadPlayer = data.getString(\"activePlayer\");\r\n                for (int i = 0; i < data.getJSONArray(\"countriesLeft\").length(); i++) {\r\n                    DATABASE.add(data.getJSONArray(\"countriesLeft\").getString(i));\r\n                }\r\n                for (int i = 0; i < data.getJSONArray(\"countriesAnswered\").length(); i++) {\r\n                    ANSWERS.add(data.getJSONArray(\"countriesAnswered\").getString(i));\r\n                }\r\n                for (int i = 0; i < data.getJSONArray(\"listOfPlayers\").length(); i++) {\r\n                    lop.add(parsePlayer(data.getJSONArray(\"listOfPlayers\").getJSONObject(i)));\r\n                }\r\n                System.out.println(\"Data Loaded\");\r\n            } else {\r\n                System.out.println(\"No data to load!\");\r\n                showMainMenu();\r\n            }\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * REQUIRES: A valid JSON object representing a player with a \"name\" field and an array \"lettersAssigned.\"\r\n    * MODIFIES: Creates a new Player object and assigns letters to it.\r\n    * EFFECTS: Parses the JSON object to create a Player with the specified name and assigned letters. Returns the\r\n       Player object.\r\n    */\r\n    private Player parsePlayer(JSONObject json) {\r\n        Player p = new Player(json.getString(\"name\"));\r\n        JSONArray lettersAssigned = json.getJSONArray(\"lettersAssigned\");\r\n        for (int i = 0; i < lettersAssigned.length(); i++) {\r\n            p.assignLetter(lettersAssigned.getString(i).toCharArray()[0]);\r\n        }\r\n\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Requires: None.\r\n     * Modifies: command.\r\n     * Effects: Displays the start menu options and handles user input.\r\n     */\r\n    public void showStartMenu() {\r\n        createData();\r\n        resetVars();\r\n        System.out.println(\"Enter number of players (1 - 5)\");\r\n        command = input.nextInt();\r\n\r\n        handleStartMenu();\r\n    }\r\n\r\n    /**\r\n     * Requires: The number of players 'nop' should be between 1 and 5.\r\n     * Modifies: Initializes the list of players by calling 'addPlayers' if 'nop' is valid.\r\n     * Effects: Handles user choices from the start menu and adds players if the input is valid.\r\n     */\r\n    public void handleStartMenu() {\r\n        if (command >= 1 && command <= 5) {\r\n            addPlayers(command);\r\n        } else {\r\n            System.out.println(\"Invalid Entry!\");\r\n            showStartMenu();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Requires: The number of players 'nop' should be between 1 and 5.\r\n     * Modifies: Initializes the list of players.\r\n     * Effects: Allows users to add player names, then displays the game status and starts the game.\r\n     */\r\n    public void addPlayers(int nop) {\r\n        for (int i = 0; i <= nop - 1; i++) {\r\n            System.out.println(\"\\nEnter name for Player \" + (i + 1) + \" : \");\r\n            lop.add(new Player(input.next()));\r\n        }\r\n        gameStatus(nop);\r\n        startGame(false);\r\n    }\r\n\r\n    /**\r\n     * Requires: The number of players 'nop' should be between 1 and 5.\r\n     * Modifies: None.\r\n     * Effects: Displays the game status, including player names and assigned letters.\r\n     */\r\n    public void gameStatus(int nop) {\r\n        System.out.println(\"\\nGame Status :\");\r\n        for (int i = 0; i <= nop - 1; i++) {\r\n            System.out.println(\"\\nPlayer \" + (i + 1) + \" : \" + lop.get(i).getName());\r\n            List<Character> assignedList = lop.get(i).getAssignedLetters();\r\n            String letters = \"\";\r\n            for (int j = 0; j < \"LOSER\".length(); j++) {\r\n                if (assignedList.contains(\"LOSER\".charAt(j))) {\r\n                    letters = letters.concat(BLUE);\r\n                    letters = letters.concat(assignedList.get(j).toString());\r\n                    letters = letters.concat(RESET);\r\n                } else {\r\n                    letters = letters + \"LOSER\".charAt(j);\r\n                }\r\n\r\n            }\r\n            if (letters.length() == 0) {\r\n                System.out.println(\"No letters assigned yet.\");\r\n            } else {\r\n                System.out.println(\"Letters Assigned : \" + letters);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Requires: None.\r\n     * Modifies: Initializes the game with a randomly selected active player and a starting letter if not loaded.\r\n                 If loaded, sets the current letter and active player based on loaded data.\r\n     * Effects: Initiates the game and displays information about the starting player and letter.\r\n     */\r\n    public void startGame(boolean loaded) {\r\n        if (loaded) {\r\n            currentLetter = loadLetter;\r\n            for (Player p : lop) {\r\n                if (p.getName().equals(loadPlayer)) {\r\n                    activePlayer = p;\r\n                }\r\n            }\r\n        } else {\r\n            currentLetter = START_WORD.charAt(random.nextInt(START_WORD.length()));\r\n            activePlayerIndex = random.nextInt(lop.size());\r\n            activePlayer = lop.get(activePlayerIndex);\r\n\r\n        }\r\n        System.out.println(\"LET THE GAME BEGIN!\");\r\n        handleGame();\r\n    }\r\n\r\n    /**\r\n     * Requires: None.\r\n     * Modifies: None.\r\n     * Effects: Handles the game logic, player interactions, and user choices during the game.\r\n     */\r\n    public void handleGame() {\r\n        System.out.println(\"\\nThe letter is : \" + currentLetter);\r\n        System.out.println(\"The player is : \" + activePlayer.getName());\r\n        System.out.println(\"\\nType 'quit' to quit to the Main Menu.\");\r\n        System.out.println(\"\\nType 'status' to display Game Status.\");\r\n        System.out.println(\"\\nAnswer : \");\r\n        answer = input.next().toLowerCase();\r\n\r\n        if (answer.equals(\"quit\")) {\r\n            handleSave();\r\n            resetVars();\r\n            showMainMenu();\r\n        } else if (answer.equals(\"status\")) {\r\n            gameStatus(lop.size());\r\n            handleGame();\r\n        } else {\r\n            checkCorrect();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Requires: None.\r\n     * Modifies: None.\r\n     * Effects: Checks if a player should be eliminated, removes them if needed,\r\n     *          and returns the number of remaining players.\r\n     */\r\n    public int handleElimination() {\r\n        Iterator<Player> iterator = lop.iterator();\r\n        while (iterator.hasNext()) {\r\n            Player p = iterator.next();\r\n            if (p.getLettersAssigned() == 5) {\r\n                iterator.remove();\r\n                System.out.println(\"Eliminated: \" + p.getName());\r\n                if (lop.size() < 2) {\r\n                    System.out.println(lop.get(0).getName() + \" has won the game!\");\r\n                    return 0;\r\n                }\r\n            }\r\n        }\r\n        return lop.size();\r\n    }\r\n\r\n    /**\r\n     * Requires: None.\r\n     * Modifies: Modifies the 'ANSWERS' list and handles player eliminations.\r\n     * Effects: Checks if the answer is correct, validates it, and assigns letters to players accordingly.\r\n     */\r\n    public void checkCorrect() {\r\n        if (answer.charAt(0) == currentLetter) {\r\n            if (DATABASE.contains(answer) && !(ANSWERS.contains(answer))) {\r\n                currentLetter = answer.charAt(answer.length() - 1);\r\n                System.out.println(\"CORRECT!\");\r\n                ANSWERS.add(answer);\r\n                DATABASE.remove(answer);\r\n            } else if (DATABASE.contains(answer) && (ANSWERS.contains(answer))) {\r\n                System.out.println(\"Wrong Answer: Already Answered\");\r\n                assignLetterToPlayer(activePlayer);\r\n            } else {\r\n                System.out.println(\"Wrong Answer: Invalid Country\");\r\n                assignLetterToPlayer(activePlayer);\r\n            }\r\n        } else {\r\n            System.out.println(\"Wrong Answer: Country doesn't start with given letter\");\r\n            assignLetterToPlayer(activePlayer);\r\n        }\r\n\r\n\r\n        changePlayer(handleElimination());\r\n    }\r\n\r\n    /**\r\n     * Requires: None.\r\n     * Modifies: Modifies the 'lettersAssigned' field, assigns a letter to the player,\r\n     *           and increments their letters assigned count.\r\n     * Effects: Assigns a letter from \"LOSER\" to a player and increases their count of assigned letters.\r\n     */\r\n    public void assignLetterToPlayer(Player p) {\r\n        String loserLetters = \"LOSER\";\r\n        char letterToAssign = loserLetters.charAt(p.getLettersAssigned());\r\n        p.assignLetter(letterToAssign);\r\n        System.out.println(\"Letter '\" + letterToAssign + \"' assigned to \" + p.getName());\r\n        p.incrementLettersAssigned();\r\n    }\r\n\r\n    /**\r\n     * Requires: The number of remaining players 'size' should be greater than 0.\r\n     * Modifies: Changes the active player for the next turn.\r\n     * Effects: Changes the active player for the next turn and continues the game.\r\n     */\r\n    public void changePlayer(int size) {\r\n        if (size != 0) {\r\n            if (activePlayerIndex == size - 1) {\r\n                activePlayerIndex = 0;\r\n            } else {\r\n                activePlayerIndex++;\r\n            }\r\n\r\n            activePlayer = lop.get(activePlayerIndex);\r\n            handleGame();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * REQUIRES: None.\r\n    * MODIFIES: command.\r\n    * EFFECTS: Displays a message asking if the user wants to save the game and handles the user's choice. If the user\r\n      chooses to save the game (1), it calls the saveGame method. If the user chooses not to save (2),\r\n      it returns to the main menu by calling the showMainMenu method.\r\n    */\r\n    public void handleSave() {\r\n        System.out.println(\"Do you want to save the game?\\n\");\r\n        System.out.println(\"1 --> Yes\");\r\n        System.out.println(\"2 --> No\");\r\n        command = input.nextInt();\r\n        if (command == 1) {\r\n            saveGame();\r\n        } else if (command == 2) {\r\n            showMainMenu();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * REQUIRES: None.\r\n    * MODIFIES: DATABASE, ANSWERS, currentLetter, activePlayer.\r\n    * EFFECTS: Saves the current game state to a JSON file at the specified path. The game state includes the list\r\n      of players' information, the database, answers, current letter, and the name of the active player.\r\n    */\r\n    public void saveGame() {\r\n        ArrayList<JSONObject> listOfPlayers = new ArrayList<>();\r\n        for (Player p : lop) {\r\n            listOfPlayers.add(p.toJson());\r\n        }\r\n        GameWriter gameWriter = new GameWriter(JSON_PATH);\r\n        gameWriter.save(currentLetter, listOfPlayers, DATABASE, ANSWERS, activePlayer.getName());\r\n        System.out.println(\"GAME SAVED!\");\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/ui/Game.java b/src/main/ui/Game.java
--- a/src/main/ui/Game.java	
+++ b/src/main/ui/Game.java	
@@ -1,6 +1,5 @@
 package ui;
 
-//import ui.Interface;
 
 import model.Player;
 import org.json.JSONArray;
@@ -44,7 +43,7 @@
     // Creates a new game instance with an empty list of players and initializes the game.
     public Game() {
         lop = new ArrayList<>();
-//        init();
+        //init();
     }
 
     /**
Index: src/main/ui/Gui.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\r\n\r\nimport ui.Game;\r\nimport model.Player;\r\n\r\nimport javax.swing.*;\r\nimport javax.swing.border.EmptyBorder;\r\nimport javax.swing.table.AbstractTableModel;\r\nimport javax.swing.plaf.ColorUIResource;\r\nimport java.awt.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n\r\nimport static java.awt.Cursor.HAND_CURSOR;\r\n\r\n/**\r\n * The Gui class manages the graphical user interface for the COMPAS application,\r\n * facilitating user interactions, game navigation, and player progress display.\r\n * It utilizes modular components and integrates with the Game class for data management,\r\n * providing an intuitive and visually appealing experience for users.\r\n */\r\npublic class Gui {\r\n\r\n    JFrame mainFrame;\r\n    JLayeredPane layeredPane;\r\n    JTable table;\r\n    Game game = new Game();\r\n\r\n    /**\r\n     * Constructor for the Gui class.\r\n     * Initializes the UIManager, sets up the main frame, and shows the main menu.\r\n     * Requires: None\r\n     * Modifies: UIManager, mainFrame, layeredPane\r\n     * Effects: Initializes the GUI and shows the main menu.\r\n     */\r\n    public Gui() {\r\n        UIManager.put(\"Button.disabledText\", new ColorUIResource(Color.white));\r\n//        showSplashScreen();\r\n        init();\r\n        showMainMenu();\r\n    }\r\n\r\n    /**\r\n     * Displays a splash screen with a delay.\r\n     * Requires: None\r\n     * Modifies: None\r\n     * Effects: Shows a splash screen for 3 seconds.\r\n     */\r\n    private void showSplashScreen() {\r\n        JFrame frame = new JFrame();\r\n        frame.setSize(180,180);\r\n        frame.setLocationRelativeTo(null);\r\n        frame.setUndecorated(true);\r\n        ImageIcon splashIcon = new ImageIcon(\"src/assets/splash-image.png\");\r\n        ImageIcon newImage = new ImageIcon(splashIcon.getImage()\r\n                .getScaledInstance(220,180,Image.SCALE_SMOOTH));\r\n        JLabel splashLabel = new JLabel(newImage);\r\n        frame.add(splashLabel);\r\n        frame.setVisible(true);\r\n\r\n        try {\r\n            Thread.sleep(3000); // Replace with your desired delay time\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        frame.setVisible(false);\r\n        frame.dispose();\r\n    }\r\n\r\n    /**\r\n     * Initializes the main frame of the application.\r\n     * Requires: None\r\n     * Modifies: mainFrame, layeredPane\r\n     * Effects: Sets up the main frame with specified properties.\r\n     */\r\n    private void init() {\r\n        mainFrame = new JFrame();\r\n        mainFrame.setTitle(\"COMPAS - Computerized Atlas\");\r\n        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        mainFrame.setResizable(false);\r\n        mainFrame.setSize(new Dimension(540,600));\r\n        mainFrame.setLocationRelativeTo(null); // open window in the center\r\n        layeredPane = new JLayeredPane();\r\n        layeredPane.setBounds(0,0,540,600);\r\n        mainFrame.add(layeredPane);\r\n\r\n        ImageIcon icon = new ImageIcon(\"src/assets/splash-image.png\");\r\n        mainFrame.setIconImage(icon.getImage());\r\n        mainFrame.getContentPane().setBackground(new Color(0x253439));\r\n        mainFrame.setVisible(true);\r\n    }\r\n\r\n    /**\r\n     * Displays the main menu in the main frame.\r\n     * Requires: None\r\n     * Modifies: layeredPane\r\n     * Effects: Shows the main menu on the main frame.\r\n     */\r\n    private void showMainMenu() {\r\n        mainFrame.setSize(new Dimension(540,600));\r\n        JPanel panel = new JPanel();\r\n        panel.setBounds(0,0,540,600);\r\n        panel.setLayout(new GridBagLayout());\r\n        panel.setBackground(new Color(0x253439));\r\n        JLabel heading = new JLabel(\"Main Menu\");\r\n        heading.setLocation(170,100);\r\n        heading.setFont(new Font(\"Verdana\", Font.BOLD, 25));\r\n        heading.setForeground(Color.white);\r\n        JPanel menuPanel = createMainMenuButtons();\r\n        panel.add(heading, setGBC(0,0,0,0.0f,0.0f,100,0));\r\n        panel.add(menuPanel, setGBC(1,0,0,1.0f,1.0f,0,100));\r\n        layeredPane.add(panel, Integer.valueOf(0));\r\n    }\r\n\r\n    /**\r\n     * Creates and configures buttons for the main menu.\r\n     * Requires: None\r\n     * Modifies: None\r\n     * Effects: Returns a panel with buttons for New Game, Load Game, and Quit Game.\r\n     */\r\n    private JPanel createMainMenuButtons() {\r\n        JPanel menuPanel = new JPanel();\r\n        menuPanel.setLayout(new GridBagLayout());\r\n        menuPanel.setSize(new Dimension(300,100));\r\n        menuPanel.setOpaque(false);\r\n        JButton b1 = new JButton(\"New Game\");\r\n        JButton b2 = new JButton(\"Load Game\");\r\n        JButton b3 = new JButton(\"Quit Game\");\r\n        setButtonProperties(b1);\r\n        setButtonProperties(b2);\r\n        setButtonProperties(b3);\r\n        addButtonListeners(b1, b2, b3);\r\n        menuPanel.add(b1, setGBC(0,100,20,0.0f,0.0f,0,0));\r\n        menuPanel.add(Box.createVerticalStrut(30), setGBC(1,0,0,0.0f,0.0f,0,0));\r\n        menuPanel.add(b2, setGBC(2,100,20,0.0f,0.0f,0,0));\r\n        menuPanel.add(Box.createVerticalStrut(30), setGBC(3,0,0,0.0f,0.0f,0,0));\r\n        menuPanel.add(b3, setGBC(4,100,20,0.0f,0.0f,0,0));\r\n\r\n        return menuPanel;\r\n    }\r\n\r\n    /**\r\n     * Adds action listeners to the main menu buttons.\r\n     * Requires: None\r\n     * Modifies: None\r\n     * Effects: Adds listeners for New Game, Load Game, and Quit Game buttons.\r\n     */\r\n    private void addButtonListeners(JButton b1, JButton b2, JButton b3) {\r\n        b1.addActionListener(e -> {\r\n            layeredPane.removeAll();\r\n            showSelectPlayers();\r\n        });\r\n\r\n        b1.addActionListener(e -> {\r\n            // load\r\n        });\r\n\r\n        b3.addActionListener(e -> {\r\n            quitGame();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Quits the game and exits the application.\r\n     * Requires: None\r\n     * Modifies: None\r\n     * Effects: Exits the application.\r\n     */\r\n    private void quitGame() {\r\n        System.exit(0);\r\n    }\r\n\r\n    /**\r\n     * Prompts the user to enter the number of players and initializes player information.\r\n     * Requires: None\r\n     * Modifies: game, layeredPane\r\n     * Effects: Prompts for player information and starts the game.\r\n     */\r\n    private void showSelectPlayers() {\r\n        String input = JOptionPane.showInputDialog(\"Enter a number:\");\r\n\r\n        // Convert the string input to an integer\r\n        try {\r\n            int number = Integer.parseInt(input);\r\n            // Now 'number' contains the entered integer\r\n            System.out.println(\"Entered number: \" + number);\r\n            for (int i = 0; i < number; i++) {\r\n                askPlayerInfo(i + 1);\r\n            }\r\n            startGame();\r\n        } catch (NumberFormatException e) {\r\n            // Handle the case where the input is not a valid integer\r\n            System.out.println(\"Invalid input. Please enter a valid number.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prompts the user to enter the name of a player and adds the player to the game.\r\n     * Requires: None\r\n     * Modifies: game\r\n     * Effects: Adds a player to the game.\r\n     */\r\n    private void askPlayerInfo(int i) {\r\n        String input = JOptionPane.showInputDialog(null,\r\n                \"Player \" + i + \" Name:\", \"Enter Player Name\", JOptionPane.PLAIN_MESSAGE);\r\n        Player p = new Player(input);\r\n        game.addToLop(p);\r\n    }\r\n\r\n    /**\r\n     * Sets up the game interface after player information is entered.\r\n     * Requires: None\r\n     * Modifies: layeredPane\r\n     * Effects: Initializes the game interface.\r\n     */\r\n    private void startGame() {\r\n        mainFrame.setSize(new Dimension(700,700));\r\n        JPanel mainPanel = new JPanel();\r\n        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.PAGE_AXIS));\r\n        mainPanel.setBackground(new Color(0x253439));\r\n        mainPanel.setBounds(0,0,680,700);\r\n        mainPanel.add(createNavBar(mainPanel));\r\n\r\n        layeredPane.add(mainPanel, Integer.valueOf(0));\r\n        layeredPane.repaint();\r\n        layeredPane.revalidate();\r\n    }\r\n\r\n    /**\r\n     * Creates a navigation bar for the game interface.\r\n     * Requires: mainPanel\r\n     * Modifies: None\r\n     * Effects: Returns a panel with navigation bar components.\r\n     */\r\n    public JPanel createNavBar(JPanel mainPanel) {\r\n        JPanel navBar = new JPanel();\r\n        navBar.setPreferredSize(new Dimension(700,5));\r\n        navBar.setBackground(Color.BLACK);\r\n        navBar.setLayout(new BoxLayout(navBar, BoxLayout.X_AXIS));\r\n        navBar.setOpaque(false);\r\n\r\n        JLabel activeGrid = createLabelForNav(\"Current Letter: \" + \"V\");\r\n        JLabel activePlayer = createLabelForNav(\"Current player: \" + \"Chintu\");\r\n\r\n        JButton exitButton = createNavBarButtons(\"Exit\");\r\n        JButton showPlayers = createNavBarButtons(\"Display Players\");\r\n\r\n        exitButton.addActionListener(e -> {\r\n            layeredPane.removeAll();\r\n            showMainMenu();\r\n        });\r\n\r\n        showPlayers.addActionListener(e -> displayPlayers());\r\n\r\n        navBar.add(activeGrid);\r\n        navBar.add(Box.createHorizontalStrut(50));\r\n        navBar.add(activePlayer);\r\n        navBar.add(Box.createHorizontalStrut(50));\r\n        navBar.add(exitButton);\r\n        navBar.add(Box.createHorizontalStrut(50));\r\n        navBar.add(showPlayers);\r\n\r\n        return navBar;\r\n    }\r\n\r\n    /**\r\n     * Creates navigation bar buttons with specified properties.\r\n     * Requires: None\r\n     * Modifies: None\r\n     * Effects: Returns a button with specified properties.\r\n     */\r\n    private JButton createNavBarButtons(String title) {\r\n        JButton b = new JButton(title);\r\n        setButtonProperties(b);\r\n        b.setFont(new Font(\"Verdana\", Font.BOLD,10));\r\n\r\n        return b;\r\n    }\r\n\r\n    /**\r\n     * Creates a label for the navigation bar with specified properties.\r\n     * Requires: None\r\n     * Modifies: None\r\n     * Effects: Returns a label with specified properties.\r\n     */\r\n    private JLabel createLabelForNav(String text) {\r\n        JLabel label = new JLabel(text);\r\n        label.setBounds(0,0,20,5);\r\n        label.setFont(new Font(\"Verdana\", Font.PLAIN,15));\r\n        label.setForeground(Color.white);\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * Displays a window showing player progress.\r\n     * Requires: None\r\n     * Modifies: None\r\n     * Effects: Displays a window with a table of player progress.\r\n     */\r\n    private void displayPlayers() {\r\n        JFrame frame = new JFrame();\r\n        frame.setTitle(\"Player Progress\");\r\n        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\r\n        frame.setResizable(false);\r\n        frame.setSize(new Dimension(540, 200));\r\n        frame.setLocationRelativeTo(null);\r\n        JPanel mainPanel = new JPanel();\r\n        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\r\n\r\n        String[] columnNames = {\"Name\", \"Assigned Letters\"};\r\n        List<Player> lopCopy = game.getLop();\r\n\r\n        Object[][] playerData = new Object[lopCopy.size()][2];\r\n        for (int i = 0; i < lopCopy.size(); i++) {\r\n            Player player = lopCopy.get(i);\r\n            playerData[i][0] = player.getName();\r\n            if (player.getAssignedLetters().size() < 1) {\r\n                playerData[i][1] = \"Not Started Yet\";\r\n            } else {\r\n                playerData[i][1] = player.getAssignedLetters();\r\n            }\r\n        }\r\n\r\n        addStuffToPanel(mainPanel, playerData, columnNames, frame);\r\n\r\n        frame.setContentPane(mainPanel);\r\n        frame.setVisible(true);\r\n    }\r\n\r\n    /**\r\n     * Adds components to the player progress panel.\r\n     * Requires: mainPanel, playerData, columnNames, frame\r\n     * Modifies: None\r\n     * Effects: Adds components to the player progress panel.\r\n     */\r\n    private void addStuffToPanel(JPanel mainPanel, Object[][] playerData, String[] columnNames, JFrame frame) {\r\n        table = createTable(playerData, columnNames);\r\n        mainPanel.add(new JScrollPane(table));\r\n        JPanel panel = new JPanel();\r\n        panel.setBounds(0,0,500,50);\r\n        panel.setLayout(new FlowLayout(FlowLayout.CENTER));\r\n\r\n        JButton b1 = new JButton(\"Add Player\");\r\n        JButton b2 = new JButton(\"Modify Selected Player\");\r\n\r\n        b1.addActionListener(e -> {\r\n            askPlayerInfo(1);\r\n            frame.dispose();\r\n            displayPlayers();\r\n        });\r\n\r\n        b2.addActionListener(e -> {\r\n            if (!table.getSelectionModel().isSelectionEmpty()) {\r\n                modifyPlayerInfo();\r\n                frame.dispose();\r\n                displayPlayers();\r\n            }\r\n        });\r\n\r\n        panel.add(b1);\r\n        panel.add(b2);\r\n        mainPanel.add(panel);\r\n    }\r\n\r\n    /**\r\n     * Modifies the name of a selected player in the game.\r\n     * Requires: playerName, newName\r\n     * Modifies: game\r\n     * Effects: Modifies the name of a selected player in the game.\r\n     */\r\n    private void modifyPlayerInfo() {\r\n        String playerName = (String)table.getValueAt(table.getSelectedRow(), 0);\r\n        String newName = JOptionPane.showInputDialog(null,\r\n                \"Enter new name\", \"Update Player Name\", JOptionPane.PLAIN_MESSAGE);\r\n        game.modifyPlayerFromLop(playerName, newName);\r\n    }\r\n\r\n    /**\r\n     * Creates a table for displaying player information.\r\n     * Requires: playerData, columnNames\r\n     * Modifies: None\r\n     * Effects: Returns a table with specified data and column names.\r\n     */\r\n    private JTable createTable(Object[][] playerData, String[] columnNames) {\r\n        JTable table = new JTable(playerData, columnNames);\r\n        table.setPreferredScrollableViewportSize(new Dimension(500, 70));\r\n        table.setFillsViewportHeight(true);\r\n        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n\r\n        return table;\r\n    }\r\n\r\n    /**\r\n     * Sets properties for buttons in the UI.\r\n     * Requires: b\r\n     * Modifies: b\r\n     * Effects: Sets properties for the specified button.\r\n     */\r\n    private void setButtonProperties(JButton b) {\r\n        b.setFont(new Font(\"Verdana\", Font.BOLD, 20));\r\n        b.setCursor(Cursor.getPredefinedCursor(HAND_CURSOR));\r\n        b.setBackground(Color.BLACK);\r\n        b.setForeground(Color.white);\r\n        b.setFocusable(false);\r\n    }\r\n\r\n    /**\r\n     * Configures GridBagConstraints for layout management.\r\n     * Requires: gy, ipadx, ipady, gwx, gwy, pt, pb\r\n     * Modifies: None\r\n     * Effects: Returns configured GridBagConstraints.\r\n     */\r\n    private GridBagConstraints setGBC(int gy, int ipadx, int ipady, float gwx, float gwy, int pt, int pb) {\r\n        GridBagConstraints gbc = new GridBagConstraints();\r\n        gbc.gridx = 1;\r\n        gbc.gridy = gy;\r\n        gbc.ipadx = ipadx;\r\n        gbc.ipady = ipady;\r\n        gbc.weightx = gwx;\r\n        gbc.weighty = gwy;\r\n        gbc.insets = new Insets(pt,0,pb,0);\r\n        return gbc;\r\n    }\r\n\r\n}\r\n
===================================================================
diff --git a/src/main/ui/Gui.java b/src/main/ui/Gui.java
--- a/src/main/ui/Gui.java	
+++ b/src/main/ui/Gui.java	
@@ -37,7 +37,7 @@
      */
     public Gui() {
         UIManager.put("Button.disabledText", new ColorUIResource(Color.white));
-//        showSplashScreen();
+        showSplashScreen();
         init();
         showMainMenu();
     }
